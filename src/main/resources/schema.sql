DROP TABLE IF EXISTS
    USERS,
    ROLES,
    USERS_ROLES,
    POSTS,
    MESSAGES,
    FRIENDSHIP_REQUESTS,
    SUBSCRIPTIONS,
    FRIENDS;

CREATE TABLE USERS
(
    id       bigint GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    username varchar(100)                            NOT NULL,
    password varchar(100)                            NOT NULL,
    email    varchar(50)                             NOT NULL,
    CONSTRAINT pk_users PRIMARY KEY (id),
    CONSTRAINT UQ_USER_USERNAME UNIQUE (username),
    CONSTRAINT UQ_USER_EMAIL UNIQUE (email)
);

CREATE TABLE ROLES
(
    id   bigint GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    name varchar(100)                            NOT NULL,
    CONSTRAINT pk_roles PRIMARY KEY (id)
);

CREATE TABLE USERS_ROLES
(
    user_id bigint REFERENCES USERS (id) ON DELETE CASCADE,
    role_id bigint REFERENCES ROLES (id) ON DELETE CASCADE,
    CONSTRAINT pk_users_roles PRIMARY KEY (user_id, role_id)
);

INSERT INTO ROLES (name)
VALUES ('ROLE_USER');

CREATE TABLE POSTS
(
    id              bigint GENERATED BY DEFAULT AS IDENTITY        NOT NULL,
    author_id       bigint REFERENCES USERS (id) ON DELETE CASCADE NOT NULL,
    header          varchar(100)                                   NOT NULL,
    text            varchar(500)                                   NOT NULL,
    image_file_path varchar(500)                                   NOT NULL,
    creation_date   timestamp                                      NOT NULL,
    CONSTRAINT pk_posts PRIMARY KEY (id)
);

CREATE TABLE MESSAGES
(
    id            bigint GENERATED BY DEFAULT AS IDENTITY        NOT NULL,
    author_id     bigint REFERENCES USERS (id) ON DELETE CASCADE NOT NULL,
    recipient_id  bigint REFERENCES USERS (id) ON DELETE CASCADE NOT NULL,
    creation_date timestamp                                      NOT NULL,
    text          varchar(500)                                   NOT NULL,
    CONSTRAINT pk_messages PRIMARY KEY (id)
);

CREATE TABLE FRIENDSHIP_REQUESTS
(
    user_id              bigint REFERENCES USERS (id) ON DELETE CASCADE,
    requesting_friend_id bigint REFERENCES USERS (id) ON DELETE CASCADE,
    CONSTRAINT pk_friendship_requests PRIMARY KEY (user_id, requesting_friend_id)

);

CREATE TABLE SUBSCRIPTIONS
(
    subscriber_id bigint REFERENCES USERS (id) ON DELETE CASCADE,
    author_id     bigint REFERENCES USERS (id) ON DELETE CASCADE,
    CONSTRAINT pk_subscriptions PRIMARY KEY (subscriber_id, author_id)

);

CREATE TABLE FRIENDS
(
    user_id   bigint REFERENCES USERS (id) ON DELETE CASCADE,
    friend_id bigint REFERENCES USERS (id) ON DELETE CASCADE,
    CONSTRAINT pk_friends PRIMARY KEY (user_id, friend_id)

);

-- CREATE SEQUENCE IF NOT EXISTS hibernate_sequence START WITH 1 INCREMENT BY 1;
